#!/usr/bin/env python3
"""
Clonage de Cha√Ænes Telegram - Point d'Entr√©e Principal
Un outil am√©lior√© de clonage de cha√Ænes Telegram avec gestion d'erreurs, journalisation et gestion de configuration.
"""

import argparse
import asyncio
import sys
import os
from datetime import datetime

from config import Config
from telegram_cloner import TelegramCloner
from logger_setup import setup_logger
from dotenv import load_dotenv


def check_credentials():
    """V√©rifie et demande les identifiants requis."""
    load_dotenv()
    
    print("üîß V√©rification de la Configuration")
    print("=" * 50)
    
    # V√©rifier les identifiants API Telegram
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    if not api_id or not api_hash:
        print("‚ùå Identifiants API Telegram manquants")
        print("\nüìã Pour obtenir vos identifiants :")
        print("1. Allez sur https://my.telegram.org/auth")
        print("2. Connectez-vous avec votre num√©ro de t√©l√©phone")
        print("3. Cr√©ez une nouvelle application")
        print("4. Copiez l'API ID et l'API Hash")
        print("\n‚öôÔ∏è Configuration :")
        print("1. Copiez .env.example vers .env")
        print("2. Ajoutez vos identifiants dans le fichier .env")
        print("\nRed√©marrez le programme apr√®s la configuration.")
        return False
    
    print("‚úÖ Identifiants API Telegram trouv√©s")
    
    # V√©rifier le token bot (optionnel)
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if bot_token:
        print("‚úÖ Token de bot trouv√© (mode hybride disponible)")
    else:
        print("‚ö†Ô∏è  Token de bot non configur√© (mode hybride indisponible)")
    
    return True

def get_channel_input(prompt, example):
    """Demande l'identifiant d'un canal √† l'utilisateur."""
    while True:
        print(f"\n{prompt}")
        print(f"Exemples : {example}")
        channel = input("Canal : ").strip()
        
        if not channel:
            print("‚ùå Veuillez entrer un identifiant de canal valide")
            continue
            
        # Validation basique
        if channel.startswith('@') or channel.startswith('-') or channel.lstrip('-').isdigit():
            return channel
        elif not channel.startswith('@'):
            return f"@{channel}"
        else:
            print("‚ùå Format invalide. Utilisez @nom_canal ou -1001234567890")

def get_options():
    """Demande les options de clonage √† l'utilisateur."""
    print("\n‚öôÔ∏è Options de Clonage")
    print("=" * 30)
    
    options = {}
    
    # Limite de messages
    while True:
        limit_input = input("Limite de messages (Entr√©e pour tous) : ").strip()
        if not limit_input:
            options['limit'] = None
            break
        try:
            limit = int(limit_input)
            if limit > 0:
                options['limit'] = limit
                break
            else:
                print("‚ùå Entrez un nombre positif")
        except ValueError:
            print("‚ùå Entrez un nombre valide")
    
    # Mode reprise
    resume = input("Reprendre depuis le dernier message ? (o/N) : ").strip().lower()
    options['resume'] = resume in ['o', 'oui', 'y', 'yes']
    
    # Mode bot
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if bot_token:
        use_bot = input("Utiliser le mode hybride (bot) ? (o/N) : ").strip().lower()
        options['use_bot'] = use_bot in ['o', 'oui', 'y', 'yes']
    else:
        options['use_bot'] = False
    
    # Mode test
    dry_run = input("Mode test (aper√ßu sans envoi) ? (o/N) : ").strip().lower()
    options['dry_run'] = dry_run in ['o', 'oui', 'y', 'yes']
    
    # Niveau de log
    print("\nNiveaux de log : DEBUG, INFO, WARNING, ERROR")
    log_level = input("Niveau de log (INFO par d√©faut) : ").strip().upper()
    if log_level not in ['DEBUG', 'INFO', 'WARNING', 'ERROR']:
        log_level = 'INFO'
    options['log_level'] = log_level
    
    return options

def interactive_mode():
    """Mode interactif pour configurer le clonage."""
    print("üöÄ Clonage de Cha√Ænes Telegram - Mode Interactif")
    print("=" * 60)
    
    # V√©rifier les identifiants
    if not check_credentials():
        return None, None, None
    
    # Demander les canaux
    source = get_channel_input(
        "üì• Canal source (d'o√π copier les messages)",
        "@mon_canal, mon_canal, -1001234567890"
    )
    
    target = get_channel_input(
        "üì§ Canal cible (o√π envoyer les messages)",
        "@ma_copie, ma_copie, -1009876543210"
    )
    
    # Demander les options
    options = get_options()
    
    # R√©sum√©
    print("\nüìã R√©sum√© de la Configuration")
    print("=" * 40)
    print(f"Canal source  : {source}")
    print(f"Canal cible   : {target}")
    print(f"Limite        : {options['limit'] or 'Tous les messages'}")
    print(f"Reprise       : {'Oui' if options['resume'] else 'Non'}")
    print(f"Mode hybride  : {'Oui' if options['use_bot'] else 'Non'}")
    print(f"Mode test     : {'Oui' if options['dry_run'] else 'Non'}")
    print(f"Niveau de log : {options['log_level']}")
    
    # Confirmation
    confirm = input("\n‚úÖ Confirmer le clonage ? (O/n) : ").strip().lower()
    if confirm in ['n', 'non', 'no']:
        print("‚ùå Clonage annul√©")
        return None, None, None
    
    return source, target, options

def parse_arguments():
    """Analyse les arguments de ligne de commande."""
    parser = argparse.ArgumentParser(
        description="Clone les messages d'une cha√Æne Telegram source vers une cha√Æne cible",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples:
  python main.py                                    # Mode interactif
  python main.py --source @chaine_source --target @chaine_cible
  python main.py --source -1001234567890 --target -1009876543210 --limit 100
  python main.py --source @chaine_source --target @chaine_cible --resume --use-bot
        """
    )
    
    parser.add_argument(
        '--source', '-s',
        required=False,
        help='Nom ou ID de la cha√Æne source (ex: @chaine, -1001234567890)'
    )
    
    parser.add_argument(
        '--target', '-t',
        required=False,
        help='Nom ou ID de la cha√Æne cible (ex: @chaine, -1001234567890)'
    )
    
    parser.add_argument(
        '--limit', '-l',
        type=int,
        default=None,
        help='Limiter le nombre de messages √† cloner (d√©faut: tous les messages)'
    )
    
    parser.add_argument(
        '--resume', '-r',
        action='store_true',
        help='Reprendre depuis le dernier message clon√©'
    )
    
    parser.add_argument(
        '--delay',
        type=float,
        default=None,
        help='D√©lai entre les messages en secondes (remplace la config)'
    )
    
    parser.add_argument(
        '--batch-size',
        type=int,
        default=None,
        help='Nombre de messages √† traiter par lot (remplace la config)'
    )
    
    parser.add_argument(
        '--log-level',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
        default='INFO',
        help='D√©finir le niveau de journalisation (d√©faut: INFO)'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Afficher ce qui serait clon√© sans envoyer les messages'
    )
    
    parser.add_argument(
        '--use-bot',
        action='store_true',
        help='Utiliser un bot pour envoyer les messages (n√©cessite TELEGRAM_BOT_TOKEN)'
    )
    
    return parser.parse_args()


async def main():
    """Point d'entr√©e principal de l'application."""
    args = parse_arguments()
    
    try:
        # Si aucun argument source/target, lancer le mode interactif
        if not args.source or not args.target:
            result = interactive_mode()
            if not result or result[0] is None or result[1] is None:
                return 0
            
            source, target, options = result
            
            # Appliquer les options du mode interactif
            args.source = source
            args.target = target
            args.limit = options['limit']
            args.resume = options['resume']
            args.use_bot = options['use_bot']
            args.dry_run = options['dry_run']
            args.log_level = options['log_level']
        else:
            # V√©rifier les identifiants en mode CLI
            if not check_credentials():
                return 1
        
        # Configuration de la journalisation
        logger = setup_logger(args.log_level)
        
        # Chargement de la configuration
        config = Config()
        
        # Remplacer la config avec les arguments de ligne de commande si fournis
        if args.delay is not None:
            config.rate_limit_delay = args.delay
        if args.batch_size is not None:
            config.batch_size = args.batch_size
        if hasattr(args, 'use_bot') and args.use_bot:
            config.use_bot_for_sending = True
            
        # Validation de la configuration
        if not config.validate():
            logger.error("√âchec de validation de la configuration. Veuillez v√©rifier votre fichier .env.")
            return 1
            
        # Initialisation du clonage Telegram
        cloner = TelegramCloner(config, logger)
        
        logger.info("D√©marrage du Clonage de Cha√Ænes Telegram")
        logger.info(f"Cha√Æne Source: {args.source}")
        logger.info(f"Cha√Æne Cible: {args.target}")
        logger.info(f"Limite de Messages: {args.limit or 'Aucune limite'}")
        logger.info(f"Mode Reprise: {'Activ√©' if args.resume else 'D√©sactiv√©'}")
        logger.info(f"Mode Test: {'Activ√©' if args.dry_run else 'D√©sactiv√©'}")
        logger.info(f"Mode Bot: {'Activ√©' if config.use_bot_for_sending else 'D√©sactiv√©'}")
        
        # D√©marrage du processus de clonage
        start_time = datetime.now()
        
        success = await cloner.clone_channel(
            source_channel=args.source,
            target_channel=args.target,
            message_limit=args.limit,
            resume=args.resume,
            dry_run=args.dry_run
        )
        
        end_time = datetime.now()
        duration = end_time - start_time
        
        if success:
            logger.info(f"Clonage termin√© avec succ√®s en {duration}")
            print("\nüéâ Clonage termin√© avec succ√®s !")
            return 0
        else:
            logger.error(f"√âchec du clonage apr√®s {duration}")
            print("\n‚ùå √âchec du clonage ! Consultez les logs pour plus de d√©tails.")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚õî Op√©ration annul√©e par l'utilisateur")
        return 130
    except Exception as e:
        print(f"üí• Erreur inattendue : {str(e)}")
        return 1


if __name__ == '__main__':
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nOp√©ration annul√©e par l'utilisateur")
        sys.exit(130)
